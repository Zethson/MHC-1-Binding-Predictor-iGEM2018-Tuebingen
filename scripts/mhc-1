#!/usr/bin/env python
import logging

import click

from src.algorithms.ml.encoder import encode_training_data
from src.algorithms.ml.gbtrees.gbtrees_training import gbtrees_train
from src.io.parser.iedb_training_data_parser import read_iedb_training_data
from src.model.encoding.extended_blomap import extended_blomap_dict

console = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console.setFormatter(formatter)
LOG = logging.getLogger("MHC-I")
LOG.addHandler(console)
LOG.setLevel(logging.INFO)


@click.command()
@click.option('-t', '--training_dataset_path', prompt='training dataset file path?',
              help='file path to the training dataset', required=True)
@click.option('-p', '--dataset_to_predict_path', prompt='prediction dataset file path?',
              help='file path to the dataset to predict', required=True)
@click.option('-o', '--predicted_dataset_path', prompt='predicted dataset output file path?',
              help='file path to the dataset already predicted', required=True)
@click.option('-s/-v', '--silent/--verbose', default=True)
def parse_CLI_start_tool(training_dataset_path, dataset_to_predict_path, predicted_dataset_path, silent):
    LOG.debug("Parsing commmandline parameters")

    LOG.info("Using training input file: " + training_dataset_path)
    LOG.info("Predicting for file: " + dataset_to_predict_path)
    LOG.info("Output will be written to " + predicted_dataset_path)

    LOG.debug("Received commandline parameters")

    try:
        peptides = read_iedb_training_data(training_dataset_path)
        encoded_aminoacids, binding_values = encode_training_data(peptides, extended_blomap_dict, "extended blomap")
        gbtrees_train(encoded_aminoacids, binding_values, silent)

    except FileNotFoundError:
        LOG.error("Training dataset not found!")
    except:
        LOG.error("Unknown error occured! Aborting...")
        SystemExit


if __name__ == '__main__':
    print("""
___  ___ _   _ _____       __   ______ _           _ _              ______             _ _      _             
|  \/  || | | /  __ \     /  |  | ___ (_)         | (_)             | ___ \           | (_)    | |            
| .  . || |_| | /  \/_____`| |  | |_/ /_ _ __   __| |_ _ __   __ _  | |_/ / __ ___  __| |_  ___| |_ ___  _ __ 
| |\/| ||  _  | |  |______|| |  | ___ \ | '_ \ / _` | | '_ \ / _` | |  __/ '__/ _ \/ _` | |/ __| __/ _ \| '__|
| |  | || | | | \__/\     _| |_ | |_/ / | | | | (_| | | | | | (_| | | |  | | |  __/ (_| | | (__| || (_) | |   
\_|  |_/\_| |_/\____/     \___/ \____/|_|_| |_|\__,_|_|_| |_|\__, | \_|  |_|  \___|\__,_|_|\___|\__\___/|_|   
                                                              __/ |                                           
                                                             |___/                                            
    """)
    parse_CLI_start_tool()
